<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                           http://www.springframework.org/schema/security
                           http://www.springframework.org/schema/security/spring-security-4.2.xsd">
    <!-- <security:http>: spring过 滤 器 链 配 置 ：
        1 ） 需 要 拦 截 什 么 资 源
        2 ） 什 么 资 源 什 么 角 色 权 限
        3 ） 定 义 认 证 方 式 ： HttpBasic.FormLogin （*）
        4 ） 定 义 登 录 页 面 ， 定 义 登 录 请 求 地 址 ， 定 义 错 误 处 理 方 式
    -->
    <security:http>
        <!--
        pattern:需 要 拦 截 资 源
        access:拦 截 方 式
                isFullyAuthenticated():该 资 源 需 要 认 证 才 可 以 访 问
        -->
        <security:csrf disabled="true"/>
        <security:intercept-url pattern="/userLogin" access="permitAll()"/>
        <security:intercept-url pattern="/getCode" access="permitAll()"/>
        <security:intercept-url pattern="/user/add" access="hasAuthority('/user/add')" />
        <security:intercept-url pattern="/user/update" access="hasAuthority('/user/update')"/>
        <security:intercept-url pattern="/user/find" access="hasAuthority('/user/find')"/>
        <security:intercept-url pattern="/user/delete" access="hasAuthority('/user/delete')"/>
        <security:intercept-url pattern="/**" access="isFullyAuthenticated()"/>
        <!-- security:http-basic:使 用 HttpBasic方 式 进 行 登 录 （ 认 证 ）-->
        <!--<security:http-basic/>-->
        <!--自定义spring Security过滤器-->
        <security:custom-filter ref="imageCodeFilter" before="FORM_LOGIN_FILTER"/>

        <security:access-denied-handler error-page="/error"/>
        <security:form-login login-page="/userLogin"  authentication-success-forward-url="/index" default-target-url="/index" authentication-success-handler-ref="myAuthenticationSuccessHandler" authentication-failure-handler-ref="myAuthenticationFailureHandler"/>
        <!--记住我功能-->
        <security:remember-me token-repository-ref="jdbcTokenRepository" token-validity-seconds="3600"/>
    </security:http>

    <security:authentication-manager>
        <security:authentication-provider user-service-ref="myUserDetailService">
            <!--密码的加密 使用BCryptPasswordEncoder-->
            <security:password-encoder ref="passwordEncoder"/>
            <!--<security:user-service>
                <security:user name="eric" password="123456" authorities="ROLE_USER"/>
            </security:user-service>-->
        </security:authentication-provider>
    </security:authentication-manager>
    <bean id="myUserDetailService" class="com.security.web.service.MyUserDetailService"/>
    <bean id="myAuthenticationSuccessHandler" class="com.security.web.config.MyAuthenticationSuccessHandler"/>
    <bean id="myAuthenticationFailureHandler" class="com.security.web.config.MyAuthenticationFailureHandler"/>
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
    <!--验证码过滤器-->
    <bean id="imageCodeFilter" class="com.security.web.filter.ImageCodeFilter">
        <property name="authenticationFailureHandler" ref="myAuthenticationFailureHandler"/>
    </bean>

    <!--记住我的功能 将cooke存储到数据库，并由springSecurity自动生成表-->
    <bean id="jdbcTokenRepository" class="org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl">
        <property name="dataSource" ref="dataSource"/>
        <property name="createTableOnStartup" value="false"/>
    </bean>

</beans>
